package frc.robot.subsystems;

import javax.swing.text.Position;

import com.pathplanner.lib.auto.AutoBuilder;
import com.pathplanner.lib.util.HolonomicPathFollowerConfig;
import com.pathplanner.lib.util.PIDConstants;
import com.pathplanner.lib.util.ReplanningConfig;

import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.kinematics.SwerveDriveOdometry;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants.AutoConstants;
import frc.robot.Constants.DriveConstants;
import frc.robot.subsystems.Drivetrain;
import frc.robot.util.DriverOI;
import java.util.function.Supplier;
import java.util.function.Consumer;

public class Auto extends SubsystemBase{
    private static Auto auto;

    private final Drivetrain mDrivetrain;
    private static SendableChooser<Command> autoChooser;

    public Auto(){
      mDrivetrain = Drivetrain.getInstance();

      //Probably delete everything relating to AutoBuilder for now! 
        AutoBuilder.configureHolonomic(
            mDrivetrain::getPose, // change to get cur |
            mDrivetrain::resetPose,
            mDrivetrain::getRobotChassisSpeeds,
            mDrivetrain::autoDrive,
            new HolonomicPathFollowerConfig( // HolonomicPathFollowerConfig, this should likely live in your Constants class
                    new PIDConstants(AutoConstants.xControllerP, 0.0, 0.0), // Translation PID constants
                    new PIDConstants(AutoConstants.thetaControllerP, 0.0, 0.0), // Rotation PID constants
                    AutoConstants.kMaxSpeedMetersPerSec, // Max module speed, in m/s
                    DriveConstants.kBaseRadius, // Drive base radius in meters. Distance from robot center to furthest module.
                    new ReplanningConfig() // Default path replanning config. See the API for the options here
            ),
            () -> {
              // Boolean supplier that controls when the path will be mirrored for the red alliance
              // This will flip the path being followed to the red side of the field.
              // THE ORIGIN WILL REMAIN ON THE BLUE SIDE

              //Change later - get select from driver station
              var alliance = DriverStation.getAlliance();
              if (alliance.isPresent()) {
                return alliance.get() == DriverStation.Alliance.Red;
              }
              return false;
            },
            mDrivetrain // Reference to the drivetrain to set requirements
        );

        autoChooser = AutoBuilder.buildAutoChooser();
        SmartDashboard.putData("Auto Chooser", autoChooser);

    }

    @Override
    public void periodic(){
        // SmartDashboard.putNumber("Auto Translation P", AutoConstants.kPTranslationController);
        // SmartDashboard.putNumber("Auto Rotation P", AutoConstants.kPThetaController);
        SmartDashboard.putString("Auto Status", "womp");
    }

    public void resetAutoBuilderAndPaths(){

    }

    public static Auto getInstance(){
        if(auto == null){
            auto = new Auto();
        }
        return auto;
    }


    public static Command getAutonomousCommand() {
      return autoChooser.getSelected();
  }

}
